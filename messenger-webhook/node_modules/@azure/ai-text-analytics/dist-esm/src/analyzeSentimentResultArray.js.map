{"version":3,"file":"analyzeSentimentResultArray.js","sourceRoot":"","sources":["../../src/analyzeSentimentResultArray.ts"],"names":[],"mappings":"AAAA,uCAAuC;AACvC,kCAAkC;AAQlC,OAAO,EAEL,0BAA0B,EAC1B,+BAA+B,EAChC,MAAM,0BAA0B,CAAC;AAClC,OAAO,EAAE,qBAAqB,EAAE,MAAM,QAAQ,CAAC;AAoB/C,MAAM,UAAU,+BAA+B,CAC7C,KAA2B,EAC3B,SAA8B,EAC9B,MAAuB,EACvB,YAAoB,EACpB,UAAwC;IAExC,MAAM,cAAc,GAAG,SAAS;SAC7B,GAAG,CACF,CAAC,QAAQ,EAA0B,EAAE;QACnC,OAAO,0BAA0B,CAC/B,QAAQ,CAAC,EAAE,EACX,QAAQ,CAAC,SAAS,EAClB,QAAQ,CAAC,gBAAgB,EACzB,QAAQ,CAAC,kBAAkB,EAC3B,QAAQ,CAAC,QAAQ,EACjB,QAAQ,CAAC,UAAU,CACpB,CAAC;IACJ,CAAC,CACF;SACA,MAAM,CACL,MAAM,CAAC,GAAG,CACR,CAAC,KAAK,EAA0B,EAAE;QAChC,OAAO,+BAA+B,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;IAChE,CAAC,CACF,CACF,CAAC;IACJ,MAAM,MAAM,GAAG,qBAAqB,CAAC,KAAK,EAAE,cAAc,CAAC,CAAC;IAC5D,OAAO,MAAM,CAAC,MAAM,CAAC,MAAM,EAAE;QAC3B,UAAU;QACV,YAAY;KACb,CAAC,CAAC;AACL,CAAC","sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentSentiment,\n  MultiLanguageInput\n} from \"./generated/models\";\nimport {\n  AnalyzeSentimentResult,\n  makeAnalyzeSentimentResult,\n  makeAnalyzeSentimentErrorResult\n} from \"./analyzeSentimentResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `AnalyzeSentimentResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface AnalyzeSentimentResultArray extends Array<AnalyzeSentimentResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeAnalyzeSentimentResultArray(\n  input: MultiLanguageInput[],\n  documents: DocumentSentiment[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): AnalyzeSentimentResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): AnalyzeSentimentResult => {\n        return makeAnalyzeSentimentResult(\n          document.id,\n          document.sentiment,\n          document.confidenceScores,\n          document.sentenceSentiments,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): AnalyzeSentimentResult => {\n          return makeAnalyzeSentimentErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n"]}