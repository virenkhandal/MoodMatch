/*
 * Copyright (c) Microsoft Corporation. All rights reserved.
 * Licensed under the MIT License. See License.txt in the project root for
 * license information.
 *
 * Code generated by Microsoft (R) AutoRest Code Generator.
 * Changes may cause incorrect behavior and will be lost if the code is
 * regenerated.
 */
import * as coreHttp from "@azure/core-http";
import * as Models from "./models";
import * as Mappers from "./models/mappers";
import * as Parameters from "./models/parameters";
import { GeneratedClientContext } from "./generatedClientContext";
class GeneratedClient extends GeneratedClientContext {
    /**
     * Initializes a new instance of the GeneratedClient class.
     * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:
     * https://westus.api.cognitive.microsoft.com).
     * @param credentials Subscription credentials which uniquely identify client subscription.
     * @param [options] The parameter options
     */
    constructor(credentials, endpoint, options) {
        super(credentials, endpoint, options);
    }
    entitiesRecognitionGeneral(input, options, callback) {
        return this.sendOperationRequest({
            input,
            options
        }, entitiesRecognitionGeneralOperationSpec, callback);
    }
    entitiesLinking(input, options, callback) {
        return this.sendOperationRequest({
            input,
            options
        }, entitiesLinkingOperationSpec, callback);
    }
    keyPhrases(input, options, callback) {
        return this.sendOperationRequest({
            input,
            options
        }, keyPhrasesOperationSpec, callback);
    }
    languages(input, options, callback) {
        return this.sendOperationRequest({
            input,
            options
        }, languagesOperationSpec, callback);
    }
    sentiment(input, options, callback) {
        return this.sendOperationRequest({
            input,
            options
        }, sentimentOperationSpec, callback);
    }
}
// Operation Specifications
const serializer = new coreHttp.Serializer(Mappers);
const entitiesRecognitionGeneralOperationSpec = {
    httpMethod: "POST",
    path: "entities/recognition/general",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.modelVersion,
        Parameters.includeStatistics
    ],
    requestBody: {
        parameterPath: "input",
        mapper: Object.assign(Object.assign({}, Mappers.MultiLanguageBatchInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.EntitiesResult
        },
        default: {
            bodyMapper: Mappers.TextAnalyticsError
        }
    },
    serializer
};
const entitiesLinkingOperationSpec = {
    httpMethod: "POST",
    path: "entities/linking",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.modelVersion,
        Parameters.includeStatistics
    ],
    requestBody: {
        parameterPath: "input",
        mapper: Object.assign(Object.assign({}, Mappers.MultiLanguageBatchInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.EntityLinkingResult
        },
        default: {
            bodyMapper: Mappers.TextAnalyticsError
        }
    },
    serializer
};
const keyPhrasesOperationSpec = {
    httpMethod: "POST",
    path: "keyPhrases",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.modelVersion,
        Parameters.includeStatistics
    ],
    requestBody: {
        parameterPath: "input",
        mapper: Object.assign(Object.assign({}, Mappers.MultiLanguageBatchInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.KeyPhraseResult
        },
        default: {
            bodyMapper: Mappers.TextAnalyticsError
        }
    },
    serializer
};
const languagesOperationSpec = {
    httpMethod: "POST",
    path: "languages",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.modelVersion,
        Parameters.includeStatistics
    ],
    requestBody: {
        parameterPath: "input",
        mapper: Object.assign(Object.assign({}, Mappers.LanguageBatchInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.LanguageResult
        },
        default: {
            bodyMapper: Mappers.TextAnalyticsError
        }
    },
    serializer
};
const sentimentOperationSpec = {
    httpMethod: "POST",
    path: "sentiment",
    urlParameters: [
        Parameters.endpoint
    ],
    queryParameters: [
        Parameters.modelVersion,
        Parameters.includeStatistics
    ],
    requestBody: {
        parameterPath: "input",
        mapper: Object.assign(Object.assign({}, Mappers.MultiLanguageBatchInput), { required: true })
    },
    responses: {
        200: {
            bodyMapper: Mappers.SentimentResponse
        },
        default: {
            bodyMapper: Mappers.TextAnalyticsError
        }
    },
    serializer
};
export { GeneratedClient, GeneratedClientContext, Models as GeneratedModels, Mappers as GeneratedMappers };
//# sourceMappingURL=generatedClient.js.map