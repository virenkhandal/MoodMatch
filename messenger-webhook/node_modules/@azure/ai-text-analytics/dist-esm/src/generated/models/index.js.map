{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\n\nimport * as coreHttp from \"@azure/core-http\";\n\n/**\n * Contains an input document to be analyzed by the service.\n */\nexport interface MultiLanguageInput {\n  /**\n   * A unique, non-empty document identifier.\n   */\n  id: string;\n  /**\n   * The input text to process.\n   */\n  text: string;\n  /**\n   * (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use \"en\"\n   * for English; \"es\" for Spanish etc. If not set, use \"en\" for English as default.\n   */\n  language?: string;\n}\n\n/**\n * Contains a set of input documents to be analyzed by the service.\n */\nexport interface MultiLanguageBatchInput {\n  /**\n   * The set of documents to process as part of this batch.\n   */\n  documents: MultiLanguageInput[];\n}\n\n/**\n * An interface representing InnerError.\n */\nexport interface InnerError {\n  /**\n   * Error code. Possible values include: 'InvalidParameterValue', 'InvalidRequestBodyFormat',\n   * 'EmptyRequest', 'MissingInputRecords', 'InvalidDocument', 'ModelVersionIncorrect',\n   * 'InvalidDocumentBatch', 'UnsupportedLanguageCode', 'InvalidCountryHint'\n   */\n  code: InnerErrorCodeValue;\n  /**\n   * Error message.\n   */\n  message: string;\n  /**\n   * Error details.\n   */\n  details?: { [propertyName: string]: string };\n  /**\n   * Error target.\n   */\n  target?: string;\n  /**\n   * Inner error contains more specific information.\n   */\n  innerError?: InnerError;\n}\n\n/**\n * An interface representing TextAnalyticsError.\n */\nexport interface TextAnalyticsError {\n  /**\n   * Error code. Possible values include: 'InvalidRequest', 'InvalidArgument',\n   * 'InternalServerError', 'ServiceUnavailable'\n   */\n  code: ErrorCodeValue;\n  /**\n   * Error message.\n   */\n  message: string;\n  /**\n   * Error target.\n   */\n  target?: string;\n  /**\n   * Inner error contains more specific information.\n   */\n  innerError?: InnerError;\n  /**\n   * Details about specific errors that led to this reported error.\n   */\n  details?: TextAnalyticsError[];\n}\n\n/**\n * An interface representing DocumentError.\n */\nexport interface DocumentError {\n  /**\n   * Document Id.\n   */\n  id: string;\n  /**\n   * Document Error.\n   */\n  error: TextAnalyticsError;\n}\n\n/**\n * An interface representing TextAnalyticsWarning.\n */\nexport interface TextAnalyticsWarning {\n  /**\n   * Error code. Possible values include: 'LongWordsInDocument', 'DocumentTruncated'\n   */\n  code: WarningCode;\n  /**\n   * Warning message.\n   */\n  message: string;\n}\n\n/**\n * if showStats=true was specified in the request this field will contain information about the\n * document payload.\n */\nexport interface TextDocumentStatistics {\n  /**\n   * Number of text elements recognized in the document.\n   */\n  characterCount: number;\n  /**\n   * Number of transactions for the document.\n   */\n  transactionCount: number;\n}\n\n/**\n * Represents the confidence scores between 0 and 1 across all sentiment classes: positive,\n * neutral, negative.\n */\nexport interface SentimentConfidenceScores {\n  positive: number;\n  neutral: number;\n  negative: number;\n}\n\n/**\n * An interface representing SentenceSentiment.\n */\nexport interface SentenceSentiment {\n  /**\n   * The sentence text.\n   */\n  text?: string;\n  /**\n   * The predicted Sentiment for the sentence. Possible values include: 'positive', 'neutral',\n   * 'negative'\n   */\n  sentiment: SentenceSentimentLabel;\n  /**\n   * The sentiment confidence score between 0 and 1 for the sentence for all classes.\n   */\n  confidenceScores: SentimentConfidenceScores;\n}\n\n/**\n * An interface representing DocumentSentiment.\n */\nexport interface DocumentSentiment {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id: string;\n  /**\n   * Predicted sentiment for document (Negative, Neutral, Positive, or Mixed). Possible values\n   * include: 'positive', 'neutral', 'negative', 'mixed'\n   */\n  sentiment: DocumentSentimentLabel;\n  statistics?: TextDocumentStatistics;\n  /**\n   * Document level sentiment confidence scores between 0 and 1 for each sentiment class.\n   */\n  confidenceScores: SentimentConfidenceScores;\n  /**\n   * Sentence level sentiment analysis.\n   */\n  sentenceSentiments: SentenceSentiment[];\n  /**\n   * Warnings encountered while processing document.\n   */\n  warnings: TextAnalyticsWarning[];\n}\n\n/**\n * if showStats=true was specified in the request this field will contain information about the\n * request payload.\n */\nexport interface TextDocumentBatchStatistics {\n  /**\n   * Number of documents submitted in the request.\n   */\n  documentCount: number;\n  /**\n   * Number of valid documents. This excludes empty, over-size limit or non-supported languages\n   * documents.\n   */\n  validDocumentCount: number;\n  /**\n   * Number of invalid documents. This includes empty, over-size limit or non-supported languages\n   * documents.\n   */\n  erroneousDocumentCount: number;\n  /**\n   * Number of transactions for the request.\n   */\n  transactionCount: number;\n}\n\n/**\n * An interface representing SentimentResponse.\n */\nexport interface SentimentResponse {\n  /**\n   * Sentiment analysis per document.\n   */\n  documents: DocumentSentiment[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * An interface representing Entity.\n */\nexport interface Entity {\n  /**\n   * Entity text as appears in the request.\n   */\n  text: string;\n  /**\n   * Entity type, such as Person/Location/Org/SSN etc\n   */\n  category: string;\n  /**\n   * Entity sub type, such as Age/Year/TimeRange etc\n   */\n  subCategory?: string;\n  /**\n   * Confidence score between 0 and 1 of the extracted entity.\n   */\n  confidenceScore: number;\n}\n\n/**\n * An interface representing DocumentEntities.\n */\nexport interface DocumentEntities {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id: string;\n  /**\n   * Recognized entities in the document.\n   */\n  entities: Entity[];\n  /**\n   * Warnings encountered while processing document.\n   */\n  warnings: TextAnalyticsWarning[];\n  /**\n   * if showStats=true was specified in the request this field will contain information about the\n   * document payload.\n   */\n  statistics?: TextDocumentStatistics;\n}\n\n/**\n * An interface representing EntitiesResult.\n */\nexport interface EntitiesResult {\n  /**\n   * Response by document\n   */\n  documents: DocumentEntities[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * An interface representing Match.\n */\nexport interface Match {\n  /**\n   * If a well-known item is recognized, a decimal number denoting the confidence level between 0\n   * and 1 will be returned.\n   */\n  confidenceScore: number;\n  /**\n   * Entity text as appears in the request.\n   */\n  text: string;\n}\n\n/**\n * An interface representing LinkedEntity.\n */\nexport interface LinkedEntity {\n  /**\n   * Entity Linking formal name.\n   */\n  name: string;\n  /**\n   * List of instances this entity appears in the text.\n   */\n  matches: Match[];\n  /**\n   * Language used in the data source.\n   */\n  language: string;\n  /**\n   * Unique identifier of the recognized entity from the data source.\n   */\n  dataSourceEntityId?: string;\n  /**\n   * URL for the entity's page from the data source.\n   */\n  url: string;\n  /**\n   * Data source used to extract entity linking, such as Wiki/Bing etc.\n   */\n  dataSource: string;\n}\n\n/**\n * An interface representing DocumentLinkedEntities.\n */\nexport interface DocumentLinkedEntities {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id: string;\n  /**\n   * Recognized well-known entities in the document.\n   */\n  entities: LinkedEntity[];\n  /**\n   * Warnings encountered while processing document.\n   */\n  warnings: TextAnalyticsWarning[];\n  /**\n   * if showStats=true was specified in the request this field will contain information about the\n   * document payload.\n   */\n  statistics?: TextDocumentStatistics;\n}\n\n/**\n * An interface representing EntityLinkingResult.\n */\nexport interface EntityLinkingResult {\n  /**\n   * Response by document\n   */\n  documents: DocumentLinkedEntities[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * An interface representing DocumentKeyPhrases.\n */\nexport interface DocumentKeyPhrases {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id: string;\n  /**\n   * A list of representative words or phrases. The number of key phrases returned is proportional\n   * to the number of words in the input document.\n   */\n  keyPhrases: string[];\n  /**\n   * Warnings encountered while processing document.\n   */\n  warnings: TextAnalyticsWarning[];\n  /**\n   * if showStats=true was specified in the request this field will contain information about the\n   * document payload.\n   */\n  statistics?: TextDocumentStatistics;\n}\n\n/**\n * An interface representing KeyPhraseResult.\n */\nexport interface KeyPhraseResult {\n  /**\n   * Response by document\n   */\n  documents: DocumentKeyPhrases[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * An interface representing LanguageInput.\n */\nexport interface LanguageInput {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id: string;\n  text: string;\n  countryHint?: string;\n}\n\n/**\n * An interface representing LanguageBatchInput.\n */\nexport interface LanguageBatchInput {\n  documents: LanguageInput[];\n}\n\n/**\n * An interface representing DetectedLanguage.\n */\nexport interface DetectedLanguage {\n  /**\n   * Long name of a detected language (e.g. English, French).\n   */\n  name: string;\n  /**\n   * A two letter representation of the detected language according to the ISO 639-1 standard (e.g.\n   * en, fr).\n   */\n  iso6391Name: string;\n  /**\n   * A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the\n   * identified language is true.\n   */\n  confidenceScore: number;\n}\n\n/**\n * An interface representing DocumentLanguage.\n */\nexport interface DocumentLanguage {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  id: string;\n  /**\n   * Detected Language.\n   */\n  detectedLanguage: DetectedLanguage;\n  /**\n   * Warnings encountered while processing document.\n   */\n  warnings: TextAnalyticsWarning[];\n  /**\n   * if showStats=true was specified in the request this field will contain information about the\n   * document payload.\n   */\n  statistics?: TextDocumentStatistics;\n}\n\n/**\n * An interface representing LanguageResult.\n */\nexport interface LanguageResult {\n  /**\n   * Response by document\n   */\n  documents: DocumentLanguage[];\n  /**\n   * Errors by document id.\n   */\n  errors: DocumentError[];\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * This field indicates which model is used for scoring.\n   */\n  modelVersion: string;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface GeneratedClientEntitiesRecognitionGeneralOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * (Optional) This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   */\n  modelVersion?: string;\n  /**\n   * (Optional) if set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface GeneratedClientEntitiesLinkingOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * (Optional) This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   */\n  modelVersion?: string;\n  /**\n   * (Optional) if set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface GeneratedClientKeyPhrasesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * (Optional) This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   */\n  modelVersion?: string;\n  /**\n   * (Optional) if set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface GeneratedClientLanguagesOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * (Optional) This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   */\n  modelVersion?: string;\n  /**\n   * (Optional) if set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Optional Parameters.\n */\nexport interface GeneratedClientSentimentOptionalParams extends coreHttp.RequestOptionsBase {\n  /**\n   * (Optional) This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   */\n  modelVersion?: string;\n  /**\n   * (Optional) if set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Defines values for ErrorCodeValue.\n * Possible values include: 'InvalidRequest', 'InvalidArgument', 'InternalServerError',\n * 'ServiceUnavailable'\n * @readonly\n * @enum {string}\n */\nexport type ErrorCodeValue = 'InvalidRequest' | 'InvalidArgument' | 'InternalServerError' | 'ServiceUnavailable';\n\n/**\n * Defines values for InnerErrorCodeValue.\n * Possible values include: 'InvalidParameterValue', 'InvalidRequestBodyFormat', 'EmptyRequest',\n * 'MissingInputRecords', 'InvalidDocument', 'ModelVersionIncorrect', 'InvalidDocumentBatch',\n * 'UnsupportedLanguageCode', 'InvalidCountryHint'\n * @readonly\n * @enum {string}\n */\nexport type InnerErrorCodeValue = 'InvalidParameterValue' | 'InvalidRequestBodyFormat' | 'EmptyRequest' | 'MissingInputRecords' | 'InvalidDocument' | 'ModelVersionIncorrect' | 'InvalidDocumentBatch' | 'UnsupportedLanguageCode' | 'InvalidCountryHint';\n\n/**\n * Defines values for WarningCode.\n * Possible values include: 'LongWordsInDocument', 'DocumentTruncated'\n * @readonly\n * @enum {string}\n */\nexport type WarningCode = 'LongWordsInDocument' | 'DocumentTruncated';\n\n/**\n * Defines values for DocumentSentimentLabel.\n * Possible values include: 'positive', 'neutral', 'negative', 'mixed'\n * @readonly\n * @enum {string}\n */\nexport type DocumentSentimentLabel = 'positive' | 'neutral' | 'negative' | 'mixed';\n\n/**\n * Defines values for SentenceSentimentLabel.\n * Possible values include: 'positive', 'neutral', 'negative'\n * @readonly\n * @enum {string}\n */\nexport type SentenceSentimentLabel = 'positive' | 'neutral' | 'negative';\n\n/**\n * Contains response data for the entitiesRecognitionGeneral operation.\n */\nexport type EntitiesRecognitionGeneralResponse = EntitiesResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: EntitiesResult;\n    };\n};\n\n/**\n * Contains response data for the entitiesLinking operation.\n */\nexport type EntitiesLinkingResponse = EntityLinkingResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: EntityLinkingResult;\n    };\n};\n\n/**\n * Contains response data for the keyPhrases operation.\n */\nexport type KeyPhrasesResponse = KeyPhraseResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: KeyPhraseResult;\n    };\n};\n\n/**\n * Contains response data for the languages operation.\n */\nexport type LanguagesResponse = LanguageResult & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: LanguageResult;\n    };\n};\n\n/**\n * Contains response data for the sentiment operation.\n */\nexport type SentimentResponse2 = SentimentResponse & {\n  /**\n   * The underlying HTTP response.\n   */\n  _response: coreHttp.HttpResponse & {\n      /**\n       * The response body as text (string format)\n       */\n      bodyAsText: string;\n\n      /**\n       * The response body as parsed JSON or XML\n       */\n      parsedBody: SentimentResponse;\n    };\n};\n"]}