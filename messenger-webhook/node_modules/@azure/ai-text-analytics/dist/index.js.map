{"version":3,"file":"index.js","sources":["../src/constants.ts","../src/generated/models/mappers.ts","../src/generated/models/parameters.ts","../src/generated/generatedClientContext.ts","../src/generated/generatedClient.ts","../src/logger.ts","../src/textAnalyticsResult.ts","../src/detectLanguageResult.ts","../src/util.ts","../src/detectLanguageResultArray.ts","../src/recognizeCategorizedEntitiesResult.ts","../src/recognizeCategorizedEntitiesResultArray.ts","../src/analyzeSentimentResult.ts","../src/analyzeSentimentResultArray.ts","../src/extractKeyPhrasesResult.ts","../src/extractKeyPhrasesResultArray.ts","../src/recognizeLinkedEntitiesResult.ts","../src/recognizeLinkedEntitiesResultArray.ts","../src/tracing.ts","../src/azureKeyCredentialPolicy.ts","../src/textAnalyticsClient.ts"],"sourcesContent":["// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nexport const SDK_VERSION: string = \"1.0.0-preview.5\";\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\n\nexport const MultiLanguageInput: coreHttp.CompositeMapper = {\n  serializedName: \"MultiLanguageInput\",\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageInput\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      language: {\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const MultiLanguageBatchInput: coreHttp.CompositeMapper = {\n  serializedName: \"MultiLanguageBatchInput\",\n  type: {\n    name: \"Composite\",\n    className: \"MultiLanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"MultiLanguageInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const InnerError: coreHttp.CompositeMapper = {\n  serializedName: \"InnerError\",\n  type: {\n    name: \"Composite\",\n    className: \"InnerError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"InvalidParameterValue\",\n            \"InvalidRequestBodyFormat\",\n            \"EmptyRequest\",\n            \"MissingInputRecords\",\n            \"InvalidDocument\",\n            \"ModelVersionIncorrect\",\n            \"InvalidDocumentBatch\",\n            \"UnsupportedLanguageCode\",\n            \"InvalidCountryHint\"\n          ]\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Dictionary\",\n          value: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextAnalyticsError: coreHttp.CompositeMapper = {\n  serializedName: \"TextAnalyticsError\",\n  type: {\n    name: \"Composite\",\n    className: \"TextAnalyticsError\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"InvalidRequest\",\n            \"InvalidArgument\",\n            \"InternalServerError\",\n            \"ServiceUnavailable\"\n          ]\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      },\n      target: {\n        serializedName: \"target\",\n        type: {\n          name: \"String\"\n        }\n      },\n      innerError: {\n        serializedName: \"innererror\",\n        type: {\n          name: \"Composite\",\n          className: \"InnerError\"\n        }\n      },\n      details: {\n        serializedName: \"details\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsError\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentError: coreHttp.CompositeMapper = {\n  serializedName: \"DocumentError\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentError\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      error: {\n        required: true,\n        serializedName: \"error\",\n        type: {\n          name: \"Composite\",\n          className: \"TextAnalyticsError\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextAnalyticsWarning: coreHttp.CompositeMapper = {\n  serializedName: \"TextAnalyticsWarning\",\n  type: {\n    name: \"Composite\",\n    className: \"TextAnalyticsWarning\",\n    modelProperties: {\n      code: {\n        required: true,\n        serializedName: \"code\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"LongWordsInDocument\",\n            \"DocumentTruncated\"\n          ]\n        }\n      },\n      message: {\n        required: true,\n        serializedName: \"message\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentStatistics: coreHttp.CompositeMapper = {\n  serializedName: \"TextDocumentStatistics\",\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentStatistics\",\n    modelProperties: {\n      characterCount: {\n        required: true,\n        serializedName: \"charactersCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        required: true,\n        serializedName: \"transactionsCount\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentConfidenceScores: coreHttp.CompositeMapper = {\n  serializedName: \"SentimentConfidenceScores\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentConfidenceScores\",\n    modelProperties: {\n      positive: {\n        required: true,\n        serializedName: \"positive\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      neutral: {\n        required: true,\n        serializedName: \"neutral\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      negative: {\n        required: true,\n        serializedName: \"negative\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentenceSentiment: coreHttp.CompositeMapper = {\n  serializedName: \"SentenceSentiment\",\n  type: {\n    name: \"Composite\",\n    className: \"SentenceSentiment\",\n    modelProperties: {\n      text: {\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        required: true,\n        serializedName: \"sentiment\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"positive\",\n            \"neutral\",\n            \"negative\"\n          ]\n        }\n      },\n      confidenceScores: {\n        required: true,\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentSentiment: coreHttp.CompositeMapper = {\n  serializedName: \"DocumentSentiment\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentSentiment\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      sentiment: {\n        required: true,\n        serializedName: \"sentiment\",\n        type: {\n          name: \"Enum\",\n          allowedValues: [\n            \"positive\",\n            \"neutral\",\n            \"negative\",\n            \"mixed\"\n          ]\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      },\n      confidenceScores: {\n        required: true,\n        serializedName: \"confidenceScores\",\n        type: {\n          name: \"Composite\",\n          className: \"SentimentConfidenceScores\"\n        }\n      },\n      sentenceSentiments: {\n        required: true,\n        serializedName: \"sentences\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"SentenceSentiment\"\n            }\n          }\n        }\n      },\n      warnings: {\n        required: true,\n        serializedName: \"warnings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const TextDocumentBatchStatistics: coreHttp.CompositeMapper = {\n  serializedName: \"TextDocumentBatchStatistics\",\n  type: {\n    name: \"Composite\",\n    className: \"TextDocumentBatchStatistics\",\n    modelProperties: {\n      documentCount: {\n        required: true,\n        serializedName: \"documentsCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      validDocumentCount: {\n        required: true,\n        serializedName: \"validDocumentsCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      erroneousDocumentCount: {\n        required: true,\n        serializedName: \"erroneousDocumentsCount\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      transactionCount: {\n        required: true,\n        serializedName: \"transactionsCount\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const SentimentResponse: coreHttp.CompositeMapper = {\n  serializedName: \"SentimentResponse\",\n  type: {\n    name: \"Composite\",\n    className: \"SentimentResponse\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentSentiment\"\n            }\n          }\n        }\n      },\n      errors: {\n        required: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        required: true,\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Entity: coreHttp.CompositeMapper = {\n  serializedName: \"Entity\",\n  type: {\n    name: \"Composite\",\n    className: \"Entity\",\n    modelProperties: {\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      category: {\n        required: true,\n        serializedName: \"category\",\n        type: {\n          name: \"String\"\n        }\n      },\n      subCategory: {\n        serializedName: \"subcategory\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        required: true,\n        serializedName: \"confidenceScore\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentEntities: coreHttp.CompositeMapper = {\n  serializedName: \"DocumentEntities\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentEntities\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        required: true,\n        serializedName: \"entities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Entity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        required: true,\n        serializedName: \"warnings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntitiesResult: coreHttp.CompositeMapper = {\n  serializedName: \"EntitiesResult\",\n  type: {\n    name: \"Composite\",\n    className: \"EntitiesResult\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        required: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        required: true,\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const Match: coreHttp.CompositeMapper = {\n  serializedName: \"Match\",\n  type: {\n    name: \"Composite\",\n    className: \"Match\",\n    modelProperties: {\n      confidenceScore: {\n        required: true,\n        serializedName: \"confidenceScore\",\n        type: {\n          name: \"Number\"\n        }\n      },\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LinkedEntity: coreHttp.CompositeMapper = {\n  serializedName: \"LinkedEntity\",\n  type: {\n    name: \"Composite\",\n    className: \"LinkedEntity\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      matches: {\n        required: true,\n        serializedName: \"matches\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"Match\"\n            }\n          }\n        }\n      },\n      language: {\n        required: true,\n        serializedName: \"language\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSourceEntityId: {\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      url: {\n        required: true,\n        serializedName: \"url\",\n        type: {\n          name: \"String\"\n        }\n      },\n      dataSource: {\n        required: true,\n        serializedName: \"dataSource\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLinkedEntities: coreHttp.CompositeMapper = {\n  serializedName: \"DocumentLinkedEntities\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLinkedEntities\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      entities: {\n        required: true,\n        serializedName: \"entities\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LinkedEntity\"\n            }\n          }\n        }\n      },\n      warnings: {\n        required: true,\n        serializedName: \"warnings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const EntityLinkingResult: coreHttp.CompositeMapper = {\n  serializedName: \"EntityLinkingResult\",\n  type: {\n    name: \"Composite\",\n    className: \"EntityLinkingResult\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLinkedEntities\"\n            }\n          }\n        }\n      },\n      errors: {\n        required: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        required: true,\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentKeyPhrases: coreHttp.CompositeMapper = {\n  serializedName: \"DocumentKeyPhrases\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentKeyPhrases\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      keyPhrases: {\n        required: true,\n        serializedName: \"keyPhrases\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"String\"\n            }\n          }\n        }\n      },\n      warnings: {\n        required: true,\n        serializedName: \"warnings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const KeyPhraseResult: coreHttp.CompositeMapper = {\n  serializedName: \"KeyPhraseResult\",\n  type: {\n    name: \"Composite\",\n    className: \"KeyPhraseResult\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentKeyPhrases\"\n            }\n          }\n        }\n      },\n      errors: {\n        required: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        required: true,\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageInput: coreHttp.CompositeMapper = {\n  serializedName: \"LanguageInput\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageInput\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      text: {\n        required: true,\n        serializedName: \"text\",\n        type: {\n          name: \"String\"\n        }\n      },\n      countryHint: {\n        serializedName: \"countryHint\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageBatchInput: coreHttp.CompositeMapper = {\n  serializedName: \"LanguageBatchInput\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageBatchInput\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"LanguageInput\"\n            }\n          }\n        }\n      }\n    }\n  }\n};\n\nexport const DetectedLanguage: coreHttp.CompositeMapper = {\n  serializedName: \"DetectedLanguage\",\n  type: {\n    name: \"Composite\",\n    className: \"DetectedLanguage\",\n    modelProperties: {\n      name: {\n        required: true,\n        serializedName: \"name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      iso6391Name: {\n        required: true,\n        serializedName: \"iso6391Name\",\n        type: {\n          name: \"String\"\n        }\n      },\n      confidenceScore: {\n        required: true,\n        serializedName: \"confidenceScore\",\n        type: {\n          name: \"Number\"\n        }\n      }\n    }\n  }\n};\n\nexport const DocumentLanguage: coreHttp.CompositeMapper = {\n  serializedName: \"DocumentLanguage\",\n  type: {\n    name: \"Composite\",\n    className: \"DocumentLanguage\",\n    modelProperties: {\n      id: {\n        required: true,\n        serializedName: \"id\",\n        type: {\n          name: \"String\"\n        }\n      },\n      detectedLanguage: {\n        required: true,\n        serializedName: \"detectedLanguage\",\n        type: {\n          name: \"Composite\",\n          className: \"DetectedLanguage\"\n        }\n      },\n      warnings: {\n        required: true,\n        serializedName: \"warnings\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"TextAnalyticsWarning\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentStatistics\"\n        }\n      }\n    }\n  }\n};\n\nexport const LanguageResult: coreHttp.CompositeMapper = {\n  serializedName: \"LanguageResult\",\n  type: {\n    name: \"Composite\",\n    className: \"LanguageResult\",\n    modelProperties: {\n      documents: {\n        required: true,\n        serializedName: \"documents\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentLanguage\"\n            }\n          }\n        }\n      },\n      errors: {\n        required: true,\n        serializedName: \"errors\",\n        type: {\n          name: \"Sequence\",\n          element: {\n            type: {\n              name: \"Composite\",\n              className: \"DocumentError\"\n            }\n          }\n        }\n      },\n      statistics: {\n        serializedName: \"statistics\",\n        type: {\n          name: \"Composite\",\n          className: \"TextDocumentBatchStatistics\"\n        }\n      },\n      modelVersion: {\n        required: true,\n        serializedName: \"modelVersion\",\n        type: {\n          name: \"String\"\n        }\n      }\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nexport const endpoint: coreHttp.OperationURLParameter = {\n  parameterPath: \"endpoint\",\n  mapper: {\n    required: true,\n    serializedName: \"Endpoint\",\n    defaultValue: '',\n    type: {\n      name: \"String\"\n    }\n  },\n  skipEncoding: true\n};\nexport const includeStatistics: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"includeStatistics\"\n  ],\n  mapper: {\n    serializedName: \"showStats\",\n    type: {\n      name: \"Boolean\"\n    }\n  }\n};\nexport const modelVersion: coreHttp.OperationQueryParameter = {\n  parameterPath: [\n    \"options\",\n    \"modelVersion\"\n  ],\n  mapper: {\n    serializedName: \"model-version\",\n    type: {\n      name: \"String\"\n    }\n  }\n};\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\nconst packageName = \"@azure/ai-text-analytics\";\nconst packageVersion = \"1.0.0-preview.5\";\n\nexport class GeneratedClientContext extends coreHttp.ServiceClient {\n  endpoint: string;\n  credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials;\n\n  /**\n   * Initializes a new instance of the GeneratedClientContext class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials, endpoint: string, options?: coreHttp.ServiceClientOptions) {\n    if (endpoint == undefined) {\n      throw new Error(\"'endpoint' cannot be null.\");\n    }\n    if (credentials == undefined) {\n      throw new Error(\"'credentials' cannot be null.\");\n    }\n\n    if (!options) {\n      options = {};\n    }\n\n    if (!options.userAgent) {\n      const defaultUserAgent = coreHttp.getDefaultUserAgentValue();\n      options.userAgent = `${packageName}/${packageVersion} ${defaultUserAgent}`;\n    }\n\n    super(credentials, options);\n\n    this.baseUri = \"{Endpoint}/text/analytics/v3.0\";\n    this.requestContentType = \"application/json; charset=utf-8\";\n    this.endpoint = endpoint;\n    this.credentials = credentials;\n  }\n}\n","/*\n * Copyright (c) Microsoft Corporation. All rights reserved.\n * Licensed under the MIT License. See License.txt in the project root for\n * license information.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is\n * regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport * as Models from \"./models\";\nimport * as Mappers from \"./models/mappers\";\nimport * as Parameters from \"./models/parameters\";\nimport { GeneratedClientContext } from \"./generatedClientContext\";\n\nclass GeneratedClient extends GeneratedClientContext {\n  /**\n   * Initializes a new instance of the GeneratedClient class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   * https://westus.api.cognitive.microsoft.com).\n   * @param credentials Subscription credentials which uniquely identify client subscription.\n   * @param [options] The parameter options\n   */\n  constructor(credentials: coreHttp.TokenCredential | coreHttp.ServiceClientCredentials, endpoint: string, options?: coreHttp.ServiceClientOptions) {\n    super(credentials, endpoint, options);\n  }\n\n  /**\n   * The API returns a list of general named entities in a given document. For the list of supported\n   * entity types, check <a href=\"https://aka.ms/taner\">Supported Entity Types in Text Analytics\n   * API</a>. See the <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a>\n   * for the list of enabled languages.\n   * @summary Named Entity Recognition\n   * @param input Collection of documents to analyze.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.EntitiesRecognitionGeneralResponse>\n   */\n  entitiesRecognitionGeneral(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientEntitiesRecognitionGeneralOptionalParams): Promise<Models.EntitiesRecognitionGeneralResponse>;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param callback The callback\n   */\n  entitiesRecognitionGeneral(input: Models.MultiLanguageBatchInput, callback: coreHttp.ServiceCallback<Models.EntitiesResult>): void;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  entitiesRecognitionGeneral(input: Models.MultiLanguageBatchInput, options: Models.GeneratedClientEntitiesRecognitionGeneralOptionalParams, callback: coreHttp.ServiceCallback<Models.EntitiesResult>): void;\n  entitiesRecognitionGeneral(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientEntitiesRecognitionGeneralOptionalParams | coreHttp.ServiceCallback<Models.EntitiesResult>, callback?: coreHttp.ServiceCallback<Models.EntitiesResult>): Promise<Models.EntitiesRecognitionGeneralResponse> {\n    return this.sendOperationRequest(\n      {\n        input,\n        options\n      },\n      entitiesRecognitionGeneralOperationSpec,\n      callback) as Promise<Models.EntitiesRecognitionGeneralResponse>;\n  }\n\n  /**\n   * The API returns a list of recognized entities with links to a well-known knowledge base. See the\n   * <a href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of\n   * enabled languages.\n   * @summary Linked entities from a well-known knowledge base\n   * @param input Collection of documents to analyze.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.EntitiesLinkingResponse>\n   */\n  entitiesLinking(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientEntitiesLinkingOptionalParams): Promise<Models.EntitiesLinkingResponse>;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param callback The callback\n   */\n  entitiesLinking(input: Models.MultiLanguageBatchInput, callback: coreHttp.ServiceCallback<Models.EntityLinkingResult>): void;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  entitiesLinking(input: Models.MultiLanguageBatchInput, options: Models.GeneratedClientEntitiesLinkingOptionalParams, callback: coreHttp.ServiceCallback<Models.EntityLinkingResult>): void;\n  entitiesLinking(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientEntitiesLinkingOptionalParams | coreHttp.ServiceCallback<Models.EntityLinkingResult>, callback?: coreHttp.ServiceCallback<Models.EntityLinkingResult>): Promise<Models.EntitiesLinkingResponse> {\n    return this.sendOperationRequest(\n      {\n        input,\n        options\n      },\n      entitiesLinkingOperationSpec,\n      callback) as Promise<Models.EntitiesLinkingResponse>;\n  }\n\n  /**\n   * The API returns a list of strings denoting the key phrases in the input text. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of\n   * enabled languages.\n   * @summary Key Phrases\n   * @param input Collection of documents to analyze. Documents can now contain a language field to\n   * indicate the text language\n   * @param [options] The optional parameters\n   * @returns Promise<Models.KeyPhrasesResponse>\n   */\n  keyPhrases(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientKeyPhrasesOptionalParams): Promise<Models.KeyPhrasesResponse>;\n  /**\n   * @param input Collection of documents to analyze. Documents can now contain a language field to\n   * indicate the text language\n   * @param callback The callback\n   */\n  keyPhrases(input: Models.MultiLanguageBatchInput, callback: coreHttp.ServiceCallback<Models.KeyPhraseResult>): void;\n  /**\n   * @param input Collection of documents to analyze. Documents can now contain a language field to\n   * indicate the text language\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  keyPhrases(input: Models.MultiLanguageBatchInput, options: Models.GeneratedClientKeyPhrasesOptionalParams, callback: coreHttp.ServiceCallback<Models.KeyPhraseResult>): void;\n  keyPhrases(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientKeyPhrasesOptionalParams | coreHttp.ServiceCallback<Models.KeyPhraseResult>, callback?: coreHttp.ServiceCallback<Models.KeyPhraseResult>): Promise<Models.KeyPhrasesResponse> {\n    return this.sendOperationRequest(\n      {\n        input,\n        options\n      },\n      keyPhrasesOperationSpec,\n      callback) as Promise<Models.KeyPhrasesResponse>;\n  }\n\n  /**\n   * The API returns the detected language and a numeric score between 0 and 1. Scores close to 1\n   * indicate 100% certainty that the identified language is true. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of\n   * enabled languages.\n   * @summary Detect Language\n   * @param input Collection of documents to analyze.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.LanguagesResponse>\n   */\n  languages(input: Models.LanguageBatchInput, options?: Models.GeneratedClientLanguagesOptionalParams): Promise<Models.LanguagesResponse>;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param callback The callback\n   */\n  languages(input: Models.LanguageBatchInput, callback: coreHttp.ServiceCallback<Models.LanguageResult>): void;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  languages(input: Models.LanguageBatchInput, options: Models.GeneratedClientLanguagesOptionalParams, callback: coreHttp.ServiceCallback<Models.LanguageResult>): void;\n  languages(input: Models.LanguageBatchInput, options?: Models.GeneratedClientLanguagesOptionalParams | coreHttp.ServiceCallback<Models.LanguageResult>, callback?: coreHttp.ServiceCallback<Models.LanguageResult>): Promise<Models.LanguagesResponse> {\n    return this.sendOperationRequest(\n      {\n        input,\n        options\n      },\n      languagesOperationSpec,\n      callback) as Promise<Models.LanguagesResponse>;\n  }\n\n  /**\n   * The API returns a sentiment prediction, as well as sentiment scores for each sentiment class\n   * (Positive, Negative, and Neutral) for the document and each sentence within it. See the <a\n   * href=\"https://aka.ms/talangs\">Supported languages in Text Analytics API</a> for the list of\n   * enabled languages.\n   * @summary Sentiment\n   * @param input Collection of documents to analyze.\n   * @param [options] The optional parameters\n   * @returns Promise<Models.SentimentResponse2>\n   */\n  sentiment(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientSentimentOptionalParams): Promise<Models.SentimentResponse2>;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param callback The callback\n   */\n  sentiment(input: Models.MultiLanguageBatchInput, callback: coreHttp.ServiceCallback<Models.SentimentResponse>): void;\n  /**\n   * @param input Collection of documents to analyze.\n   * @param options The optional parameters\n   * @param callback The callback\n   */\n  sentiment(input: Models.MultiLanguageBatchInput, options: Models.GeneratedClientSentimentOptionalParams, callback: coreHttp.ServiceCallback<Models.SentimentResponse>): void;\n  sentiment(input: Models.MultiLanguageBatchInput, options?: Models.GeneratedClientSentimentOptionalParams | coreHttp.ServiceCallback<Models.SentimentResponse>, callback?: coreHttp.ServiceCallback<Models.SentimentResponse>): Promise<Models.SentimentResponse2> {\n    return this.sendOperationRequest(\n      {\n        input,\n        options\n      },\n      sentimentOperationSpec,\n      callback) as Promise<Models.SentimentResponse2>;\n  }\n}\n\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers);\nconst entitiesRecognitionGeneralOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"entities/recognition/general\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion,\n    Parameters.includeStatistics\n  ],\n  requestBody: {\n    parameterPath: \"input\",\n    mapper: {\n      ...Mappers.MultiLanguageBatchInput,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntitiesResult\n    },\n    default: {\n      bodyMapper: Mappers.TextAnalyticsError\n    }\n  },\n  serializer\n};\n\nconst entitiesLinkingOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"entities/linking\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion,\n    Parameters.includeStatistics\n  ],\n  requestBody: {\n    parameterPath: \"input\",\n    mapper: {\n      ...Mappers.MultiLanguageBatchInput,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.EntityLinkingResult\n    },\n    default: {\n      bodyMapper: Mappers.TextAnalyticsError\n    }\n  },\n  serializer\n};\n\nconst keyPhrasesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"keyPhrases\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion,\n    Parameters.includeStatistics\n  ],\n  requestBody: {\n    parameterPath: \"input\",\n    mapper: {\n      ...Mappers.MultiLanguageBatchInput,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.KeyPhraseResult\n    },\n    default: {\n      bodyMapper: Mappers.TextAnalyticsError\n    }\n  },\n  serializer\n};\n\nconst languagesOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"languages\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion,\n    Parameters.includeStatistics\n  ],\n  requestBody: {\n    parameterPath: \"input\",\n    mapper: {\n      ...Mappers.LanguageBatchInput,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.LanguageResult\n    },\n    default: {\n      bodyMapper: Mappers.TextAnalyticsError\n    }\n  },\n  serializer\n};\n\nconst sentimentOperationSpec: coreHttp.OperationSpec = {\n  httpMethod: \"POST\",\n  path: \"sentiment\",\n  urlParameters: [\n    Parameters.endpoint\n  ],\n  queryParameters: [\n    Parameters.modelVersion,\n    Parameters.includeStatistics\n  ],\n  requestBody: {\n    parameterPath: \"input\",\n    mapper: {\n      ...Mappers.MultiLanguageBatchInput,\n      required: true\n    }\n  },\n  responses: {\n    200: {\n      bodyMapper: Mappers.SentimentResponse\n    },\n    default: {\n      bodyMapper: Mappers.TextAnalyticsError\n    }\n  },\n  serializer\n};\n\nexport {\n  GeneratedClient,\n  GeneratedClientContext,\n  Models as GeneratedModels,\n  Mappers as GeneratedMappers\n};\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { createClientLogger } from \"@azure/logger\";\n\n/**\n * The @azure/logger configuration for this package.\n */\nexport const logger = createClientLogger(\"ai-text-analytics\");\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError as GeneratedTextAnalyticsErrorModel,\n  InnerError,\n  ErrorCodeValue,\n  InnerErrorCodeValue,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of a text analytics operation on a single input document.\n */\nexport type TextAnalyticsResult = TextAnalyticsSuccessResult | TextAnalyticsErrorResult;\n\n/**\n * An Error Code returned from the Text Analytics service. Possible\n * values include:\n *\n * For more information about the error, see the `message` property of the associated error.\n */\nexport type ErrorCode = ErrorCodeValue | InnerErrorCodeValue;\n\n/**\n * Type describing an error from the Text Analytics service\n */\nexport interface TextAnalyticsError {\n  /**\n   * A code describing the kind of error produced\n   */\n  readonly code: ErrorCode;\n  /**\n   * A message from the service explaining the error\n   */\n  readonly message: string;\n  /**\n   * The target of the particular error (for example, the name of an invalid parameter)\n   */\n  readonly target?: string;\n}\n\n/**\n * Base type for results of text analytics operations corresponding to a single\n * input document.\n */\nexport interface TextAnalyticsSuccessResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * Statistics about the input document and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  readonly statistics?: TextDocumentStatistics;\n\n  /**\n   * An array of warning data corresponding to this document.\n   *\n   * If no warnings were returned, this array will be empty.\n   */\n  readonly warnings: TextAnalyticsWarning[];\n\n  /**\n   * Discriminant to determine if that this is an error result.\n   */\n  readonly error?: undefined;\n}\n\n/**\n * Base type for error results of text analytics operations corresponding to a\n * single document.\n */\nexport interface TextAnalyticsErrorResult {\n  /**\n   * Unique, non-empty document identifier.\n   */\n  readonly id: string;\n\n  /**\n   * The Error for this document result.\n   */\n  readonly error: TextAnalyticsError;\n}\n\n/**\n * Helper function for converting nested service error into\n * the unified TextAnalyticsError\n */\nfunction intoTextAnalyticsError(\n  errorModel: GeneratedTextAnalyticsErrorModel | InnerError\n): TextAnalyticsError {\n  // Return the deepest error. This will always be at most\n  // one level for TextAnalytics\n  if (errorModel.innerError !== undefined) {\n    return intoTextAnalyticsError(errorModel.innerError);\n  }\n\n  return {\n    code: errorModel.code,\n    message: errorModel.message,\n    target: errorModel.target\n  };\n}\n\nexport function makeTextAnalyticsSuccessResult(\n  id: string,\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): TextAnalyticsSuccessResult {\n  return {\n    id,\n    statistics,\n    warnings\n  };\n}\n\nexport function makeTextAnalyticsErrorResult(\n  id: string,\n  error: GeneratedTextAnalyticsErrorModel\n): TextAnalyticsErrorResult {\n  return {\n    id,\n    error: intoTextAnalyticsError(error)\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  DetectedLanguage,\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the detect language operation on a single document.\n */\nexport type DetectLanguageResult = DetectLanguageSuccessResult | DetectLanguageErrorResult;\n\n/**\n * The result of the detect language operation on a single document,\n * containing a prediction of what language the document is written in.\n */\nexport interface DetectLanguageSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The top detected language by confidence score.\n   */\n  readonly primaryLanguage: DetectedLanguage;\n}\n\n/**\n * An error result from the detect languge operation on a single document.\n */\nexport type DetectLanguageErrorResult = TextAnalyticsErrorResult;\n\nexport function makeDetectLanguageResult(\n  id: string,\n  detectedLanguage: DetectedLanguage,\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): DetectLanguageSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    primaryLanguage: detectedLanguage\n  };\n}\n\nexport function makeDetectLanguageErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): DetectLanguageErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { TextAnalyticsError } from \"./generated/models\";\n\nimport { logger } from \"./logger\";\nimport { RestError } from \"@azure/core-http\";\n\nexport interface IdObject {\n  id: string;\n}\n\nfunction isGenericError(o: IdObject): o is IdObject & { error: TextAnalyticsError } {\n  return o.id === \"\";\n}\n\n/**\n * Given a sorted array of input objects (with a unique ID) and an unsorted array of results,\n * return a sorted array of results.\n *\n * If a generic error (id = \"\") occurred in the response, this function will throw it\n * as an exception.\n *\n * @ignore\n * @param sortedArray An array of entries sorted by `id`\n * @param unsortedArray An array of entries that contain `id` but are not sorted\n */\nexport function sortResponseIdObjects<T extends IdObject, U extends IdObject>(\n  sortedArray: T[],\n  unsortedArray: U[]\n): U[] {\n  const unsortedMap = new Map<string, U>();\n  for (const item of unsortedArray) {\n    if (isGenericError(item)) {\n      throw new RestError(item.error.message, item.error.code, 400);\n    }\n    unsortedMap.set(item.id, item);\n  }\n\n  if (unsortedArray.length !== sortedArray.length) {\n    const ordinal = unsortedArray.length > sortedArray.length ? \"more\" : \"fewer\";\n    logger.warning(\n      `The service returned ${ordinal} responses than inputs. Some errors may be treated as fatal.`\n    );\n  }\n\n  return sortedArray.map((item) => unsortedMap.get(item.id)!);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentLanguage,\n  DocumentError,\n  LanguageInput\n} from \"./generated/models\";\nimport {\n  DetectLanguageResult,\n  makeDetectLanguageResult,\n  makeDetectLanguageErrorResult\n} from \"./detectLanguageResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `DetectLanguageResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface DetectLanguageResultArray extends Array<DetectLanguageResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeDetectLanguageResultArray(\n  input: LanguageInput[],\n  documents: DocumentLanguage[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): DetectLanguageResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): DetectLanguageResult => {\n        return makeDetectLanguageResult(\n          document.id,\n          document.detectedLanguage,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): DetectLanguageResult => {\n          return makeDetectLanguageErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  Entity,\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * An entity from text analysis with information about its categorical\n * classification.\n */\nexport interface CategorizedEntity extends Entity {}\n\n/**\n * The result of the recognize entities operation on a single document.\n */\nexport type RecognizeCategorizedEntitiesResult =\n  | RecognizeCategorizedEntitiesSuccessResult\n  | RecognizeCategorizedEntitiesErrorResult;\n\n/**\n * The result of the recognize entities operation on a single document, containing the collection of\n * `Entity` objects identified in that document.\n */\nexport interface RecognizeCategorizedEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: CategorizedEntity[];\n}\n\n/**\n * An error result from the recognize entities operation on a single document.\n */\nexport type RecognizeCategorizedEntitiesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeRecognizeCategorizedEntitiesResult(\n  id: string,\n  entities: CategorizedEntity[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): RecognizeCategorizedEntitiesSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\nexport function makeRecognizeCategorizedEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeCategorizedEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentEntities,\n  MultiLanguageInput\n} from \"./generated/models\";\nimport {\n  RecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesResult,\n  makeRecognizeCategorizedEntitiesErrorResult\n} from \"./recognizeCategorizedEntitiesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `RecognizeCategorizedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeCategorizedEntitiesResultArray\n  extends Array<RecognizeCategorizedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeRecognizeCategorizedEntitiesResultArray(\n  input: MultiLanguageInput[],\n  documents: DocumentEntities[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): RecognizeCategorizedEntitiesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): RecognizeCategorizedEntitiesResult => {\n        return makeRecognizeCategorizedEntitiesResult(\n          document.id,\n          document.entities,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): RecognizeCategorizedEntitiesResult => {\n          return makeRecognizeCategorizedEntitiesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  DocumentSentimentLabel,\n  SentenceSentiment,\n  SentimentConfidenceScores,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the analyze sentiment operation on a single document.\n */\nexport type AnalyzeSentimentResult = AnalyzeSentimentSuccessResult | AnalyzeSentimentErrorResult;\n\n/**\n *  The result of the analyze sentiment operation on a single document,\n *  containing the predicted sentiment for each sentence as well as for the full document.\n */\nexport interface AnalyzeSentimentSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * Predicted sentiment for document. Possible values\n   * include: 'positive', 'neutral', 'negative', 'mixed'\n   */\n  sentiment: DocumentSentimentLabel;\n  /**\n   * Document level sentiment confidence scores between 0 and 1 for each sentiment class.\n   */\n  confidenceScores: SentimentConfidenceScores;\n  /**\n   * The predicted sentiment for each sentence in the corresponding document.\n   */\n  sentences: SentenceSentiment[];\n}\n\n/**\n * An error result from the analyze sentiment operation on a single document.\n */\nexport type AnalyzeSentimentErrorResult = TextAnalyticsErrorResult;\n\nexport function makeAnalyzeSentimentResult(\n  id: string,\n  sentiment: DocumentSentimentLabel,\n  confidenceScores: SentimentConfidenceScores,\n  sentences: SentenceSentiment[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): AnalyzeSentimentSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    sentiment,\n    confidenceScores,\n    sentences\n  };\n}\n\nexport function makeAnalyzeSentimentErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): AnalyzeSentimentErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentSentiment,\n  MultiLanguageInput\n} from \"./generated/models\";\nimport {\n  AnalyzeSentimentResult,\n  makeAnalyzeSentimentResult,\n  makeAnalyzeSentimentErrorResult\n} from \"./analyzeSentimentResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `AnalyzeSentimentResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface AnalyzeSentimentResultArray extends Array<AnalyzeSentimentResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeAnalyzeSentimentResultArray(\n  input: MultiLanguageInput[],\n  documents: DocumentSentiment[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): AnalyzeSentimentResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): AnalyzeSentimentResult => {\n        return makeAnalyzeSentimentResult(\n          document.id,\n          document.sentiment,\n          document.confidenceScores,\n          document.sentenceSentiments,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): AnalyzeSentimentResult => {\n          return makeAnalyzeSentimentErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the extract key phrases operation on a single document.\n */\nexport type ExtractKeyPhrasesResult = ExtractKeyPhrasesSuccessResult | ExtractKeyPhrasesErrorResult;\n\n/**\n * The result of the extract key phrases operation on a single document,\n * containing a collection of the key phrases identified in that document.\n */\nexport interface ExtractKeyPhrasesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * A list of representative words or phrases. The number of key phrases returned is proportional\n   * to the number of words in the input document.\n   */\n  keyPhrases: string[];\n}\n\n/**\n * An error result from the extract key phrases operation on a single document.\n */\nexport type ExtractKeyPhrasesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeExtractKeyPhrasesResult(\n  id: string,\n  keyPhrases: string[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): ExtractKeyPhrasesSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    keyPhrases\n  };\n}\n\nexport function makeExtractKeyPhrasesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): ExtractKeyPhrasesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentKeyPhrases,\n  MultiLanguageInput\n} from \"./generated/models\";\nimport {\n  ExtractKeyPhrasesResult,\n  makeExtractKeyPhrasesResult,\n  makeExtractKeyPhrasesErrorResult\n} from \"./extractKeyPhrasesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `ExtractKeyPhrasesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface ExtractKeyPhrasesResultArray extends Array<ExtractKeyPhrasesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeExtractKeyPhrasesResultArray(\n  input: MultiLanguageInput[],\n  documents: DocumentKeyPhrases[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): ExtractKeyPhrasesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): ExtractKeyPhrasesResult => {\n        return makeExtractKeyPhrasesResult(\n          document.id,\n          document.keyPhrases,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): ExtractKeyPhrasesResult => {\n          return makeExtractKeyPhrasesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  makeTextAnalyticsSuccessResult,\n  TextAnalyticsSuccessResult,\n  TextAnalyticsErrorResult,\n  makeTextAnalyticsErrorResult\n} from \"./textAnalyticsResult\";\nimport {\n  TextDocumentStatistics,\n  TextAnalyticsError,\n  LinkedEntity,\n  TextAnalyticsWarning\n} from \"./generated/models\";\n\n/**\n * The result of the recognize linked entities operation on a single document.\n */\nexport type RecognizeLinkedEntitiesResult =\n  | RecognizeLinkedEntitiesSuccessResult\n  | RecognizeLinkedEntitiesErrorResult;\n\n/**\n * The result of the recognize linked entities operation on a single document,\n * containing a collection of the `LinkedEntity` objects identified in that document.\n */\nexport interface RecognizeLinkedEntitiesSuccessResult extends TextAnalyticsSuccessResult {\n  /**\n   * The collection of entities identified in the input document.\n   */\n  readonly entities: LinkedEntity[];\n}\n\n/**\n * An error result from the recognize linked entities operation on a single document.\n */\nexport type RecognizeLinkedEntitiesErrorResult = TextAnalyticsErrorResult;\n\nexport function makeRecognizeLinkedEntitiesResult(\n  id: string,\n  entities: LinkedEntity[],\n  warnings: TextAnalyticsWarning[],\n  statistics?: TextDocumentStatistics\n): RecognizeLinkedEntitiesSuccessResult {\n  return {\n    ...makeTextAnalyticsSuccessResult(id, warnings, statistics),\n    entities\n  };\n}\n\nexport function makeRecognizeLinkedEntitiesErrorResult(\n  id: string,\n  error: TextAnalyticsError\n): RecognizeLinkedEntitiesErrorResult {\n  return makeTextAnalyticsErrorResult(id, error);\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  TextDocumentBatchStatistics,\n  DocumentError,\n  DocumentLinkedEntities,\n  MultiLanguageInput\n} from \"./generated/models\";\nimport {\n  RecognizeLinkedEntitiesResult,\n  makeRecognizeLinkedEntitiesResult,\n  makeRecognizeLinkedEntitiesErrorResult\n} from \"./recognizeLinkedEntitiesResult\";\nimport { sortResponseIdObjects } from \"./util\";\n\n/**\n * Array of `RecognizeLinkedEntitiesResult` objects corresponding to a batch of input documents, and\n * annotated with information about the batch operation.\n */\nexport interface RecognizeLinkedEntitiesResultArray\n  extends Array<RecognizeLinkedEntitiesResult> {\n  /**\n   * Statistics about the input document batch and how it was processed\n   * by the service. This property will have a value when includeStatistics is set to true\n   * in the client call.\n   */\n  statistics?: TextDocumentBatchStatistics;\n  /**\n   * The version of the text analytics model used by this operation on this\n   * batch of input documents.\n   */\n  modelVersion: string;\n}\n\nexport function makeRecognizeLinkedEntitiesResultArray(\n  input: MultiLanguageInput[],\n  documents: DocumentLinkedEntities[],\n  errors: DocumentError[],\n  modelVersion: string,\n  statistics?: TextDocumentBatchStatistics\n): RecognizeLinkedEntitiesResultArray {\n  const unsortedResult = documents\n    .map(\n      (document): RecognizeLinkedEntitiesResult => {\n        return makeRecognizeLinkedEntitiesResult(\n          document.id,\n          document.entities,\n          document.warnings,\n          document.statistics\n        );\n      }\n    )\n    .concat(\n      errors.map(\n        (error): RecognizeLinkedEntitiesResult => {\n          return makeRecognizeLinkedEntitiesErrorResult(error.id, error.error);\n        }\n      )\n    );\n  const result = sortResponseIdObjects(input, unsortedResult);\n  return Object.assign(result, {\n    statistics,\n    modelVersion\n  });\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { getTracer } from \"@azure/core-tracing\";\nimport { Span, SpanOptions, SpanKind } from \"@opentelemetry/api\";\nimport { OperationOptions } from \"@azure/core-http\";\n\ntype OperationTracingOptions = OperationOptions[\"tracingOptions\"];\n\n/**\n * Creates a span using the global tracer.\n * @ignore\n * @param name The name of the operation being performed.\n * @param tracingOptions The options for the underlying http request.\n */\nexport function createSpan<T extends OperationOptions>(\n  operationName: string,\n  operationOptions: T\n): { span: Span; updatedOptions: T } {\n  const tracer = getTracer();\n  const tracingOptions = operationOptions.tracingOptions || {};\n  const spanOptions: SpanOptions = {\n    ...tracingOptions.spanOptions,\n    kind: SpanKind.INTERNAL\n  };\n\n  const span = tracer.startSpan(\n    `Azure.CognitiveServices.TextAnalytics.${operationName}`,\n    spanOptions\n  );\n\n  span.setAttribute(\"az.namespace\", \"Microsoft.CognitiveServices\");\n\n  let newSpanOptions = tracingOptions.spanOptions || {};\n  if (span.isRecording()) {\n    newSpanOptions = {\n      ...tracingOptions.spanOptions,\n      parent: span.context(),\n      attributes: {\n        ...spanOptions.attributes,\n        \"az.namespace\": \"Microsoft.CognitiveServices\"\n      }\n    };\n  }\n\n  const newTracingOptions: OperationTracingOptions = {\n    ...tracingOptions,\n    spanOptions: newSpanOptions\n  };\n\n  const newOperationOptions: T = {\n    ...operationOptions,\n    tracingOptions: newTracingOptions\n  };\n\n  return {\n    span,\n    updatedOptions: newOperationOptions\n  };\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport { KeyCredential } from \"@azure/core-auth\";\nimport {\n  RequestPolicyFactory,\n  RequestPolicy,\n  BaseRequestPolicy,\n  WebResourceLike,\n  HttpOperationResponse,\n  RequestPolicyOptionsLike\n} from \"@azure/core-http\";\n\nconst API_KEY_HEADER_NAME = \"Ocp-Apim-Subscription-Key\";\n\n/**\n * Create an HTTP pipeline policy to authenticate a request\n * using an `AzureKeyCredential` for Text Analytics\n */\nexport function createTextAnalyticsAzureKeyCredentialPolicy(\n  credential: KeyCredential\n): RequestPolicyFactory {\n  return {\n    create: (nextPolicy: RequestPolicy, options: RequestPolicyOptionsLike) => {\n      return new TextAnalyticsAzureKeyCredentialPolicy(nextPolicy, options, credential);\n    }\n  };\n}\n\n/**\n * A concrete implementation of an AzureKeyCredential policy\n * using the appropriate header for TextAnalytics\n */\nclass TextAnalyticsAzureKeyCredentialPolicy extends BaseRequestPolicy {\n  private credential: KeyCredential;\n\n  constructor(\n    nextPolicy: RequestPolicy,\n    options: RequestPolicyOptionsLike,\n    credential: KeyCredential\n  ) {\n    super(nextPolicy, options);\n    this.credential = credential;\n  }\n\n  public async sendRequest(webResource: WebResourceLike): Promise<HttpOperationResponse> {\n    if (!webResource) {\n      throw new Error(\"webResource cannot be null or undefined\");\n    }\n\n    webResource.headers.set(API_KEY_HEADER_NAME, this.credential.key);\n    return this._nextPolicy.sendRequest(webResource);\n  }\n}\n","// Copyright (c) Microsoft Corporation.\n// Licensed under the MIT license.\n\nimport {\n  PipelineOptions,\n  createPipelineFromOptions,\n  InternalPipelineOptions,\n  isTokenCredential,\n  bearerTokenAuthenticationPolicy,\n  operationOptionsToRequestOptionsBase,\n  OperationOptions,\n  ServiceClientCredentials\n} from \"@azure/core-http\";\nimport { TokenCredential, KeyCredential } from \"@azure/core-auth\";\nimport { SDK_VERSION } from \"./constants\";\nimport { GeneratedClient } from \"./generated/generatedClient\";\nimport { logger } from \"./logger\";\nimport {\n  LanguageInput as DetectLanguageInput,\n  MultiLanguageInput as TextDocumentInput\n} from \"./generated/models\";\nimport {\n  DetectLanguageResultArray,\n  makeDetectLanguageResultArray\n} from \"./detectLanguageResultArray\";\nimport {\n  RecognizeCategorizedEntitiesResultArray,\n  makeRecognizeCategorizedEntitiesResultArray\n} from \"./recognizeCategorizedEntitiesResultArray\";\nimport {\n  AnalyzeSentimentResultArray,\n  makeAnalyzeSentimentResultArray\n} from \"./analyzeSentimentResultArray\";\nimport {\n  makeExtractKeyPhrasesResultArray,\n  ExtractKeyPhrasesResultArray\n} from \"./extractKeyPhrasesResultArray\";\nimport {\n  RecognizeLinkedEntitiesResultArray,\n  makeRecognizeLinkedEntitiesResultArray\n} from \"./recognizeLinkedEntitiesResultArray\";\nimport { createSpan } from \"./tracing\";\nimport { CanonicalCode } from \"@opentelemetry/api\";\nimport { createTextAnalyticsAzureKeyCredentialPolicy } from \"./azureKeyCredentialPolicy\";\n\nconst DEFAULT_COGNITIVE_SCOPE = \"https://cognitiveservices.azure.com/.default\";\n\n/**\n * Client options used to configure TextAnalytics API requests.\n */\nexport interface TextAnalyticsClientOptions extends PipelineOptions {\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  defaultCountryHint?: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  defaultLanguage?: string;\n}\n\n/**\n * Options common to all text analytics operations.\n */\nexport interface TextAnalyticsOperationOptions extends OperationOptions {\n  /**\n   * This value indicates which model will be used for scoring. If a model-version is\n   * not specified, the API should default to the latest, non-preview version.\n   * For supported model versions, see operation-specific documentation, for example:\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis#model-versioning\n   */\n  modelVersion?: string;\n  /**\n   * If set to true, response will contain input and document level statistics.\n   */\n  includeStatistics?: boolean;\n}\n\n/**\n * Options for the detect languages operation.\n */\nexport type DetectLanguageOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the recognize entities operation.\n */\nexport type RecognizeCategorizedEntitiesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the analyze sentiment operation.\n */\nexport type AnalyzeSentimentOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the extract key phrases operation.\n */\nexport type ExtractKeyPhrasesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Options for the recognize linked entities operation.\n */\nexport type RecognizeLinkedEntitiesOptions = TextAnalyticsOperationOptions;\n\n/**\n * Client class for interacting with Azure Text Analytics.\n */\nexport class TextAnalyticsClient {\n  /**\n   * The URL to the TextAnalytics endpoint\n   */\n  public readonly endpointUrl: string;\n\n  /**\n   * The default country hint to use. Defaults to \"us\".\n   */\n  public defaultCountryHint: string;\n\n  /**\n   * The default language to use. Defaults to \"en\".\n   */\n  public defaultLanguage: string;\n\n  /**\n   * @internal\n   * @ignore\n   * A reference to the auto-generated TextAnalytics HTTP client.\n   */\n  private readonly client: GeneratedClient;\n\n  /**\n   * Creates an instance of TextAnalyticsClient.\n   *\n   * Example usage:\n   * ```ts\n   * import { TextAnalyticsClient, AzureKeyCredential } from \"@azure/ai-text-analytics\";\n   *\n   * const client = new TextAnalyticsClient(\n   *    \"<service endpoint>\",\n   *    new AzureKeyCredential(\"<api key>\")\n   * );\n   * ```\n   * @param {string} endpointUrl The URL to the TextAnalytics endpoint\n   * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.\n   * @param {TextAnalyticsClientOptions} [options] Used to configure the TextAnalytics client.\n   */\n  constructor(\n    endpointUrl: string,\n    credential: TokenCredential | KeyCredential,\n    options: TextAnalyticsClientOptions = {}\n  ) {\n    this.endpointUrl = endpointUrl;\n    const { defaultCountryHint = \"us\", defaultLanguage = \"en\", ...pipelineOptions } = options;\n    this.defaultCountryHint = defaultCountryHint;\n    this.defaultLanguage = defaultLanguage;\n\n    const libInfo = `azsdk-js-ai-textanalytics/${SDK_VERSION}`;\n    if (!pipelineOptions.userAgentOptions) {\n      pipelineOptions.userAgentOptions = {};\n    }\n    if (pipelineOptions.userAgentOptions.userAgentPrefix) {\n      pipelineOptions.userAgentOptions.userAgentPrefix = `${pipelineOptions.userAgentOptions.userAgentPrefix} ${libInfo}`;\n    } else {\n      pipelineOptions.userAgentOptions.userAgentPrefix = libInfo;\n    }\n\n    const authPolicy = isTokenCredential(credential)\n      ? bearerTokenAuthenticationPolicy(credential, DEFAULT_COGNITIVE_SCOPE)\n      : createTextAnalyticsAzureKeyCredentialPolicy(credential);\n\n    const internalPipelineOptions: InternalPipelineOptions = {\n      ...pipelineOptions,\n      ...{\n        loggingOptions: {\n          logger: logger.info,\n          allowedHeaderNames: [\"x-ms-correlation-request-id\", \"x-ms-request-id\"]\n        }\n      }\n    };\n\n    const pipeline = createPipelineFromOptions(internalPipelineOptions, authPolicy);\n\n    // The contract with the generated client requires a credential, even though it is never used\n    // when a pipeline is provided. Until that contract can be changed, this dummy credential will\n    // throw an error if the client ever attempts to use it.\n    const dummyCredential: ServiceClientCredentials = {\n      signRequest() {\n        throw new Error(\n          \"Internal error: Attempted to use credential from service client, but a pipeline was provided.\"\n        );\n      }\n    };\n\n    this.client = new GeneratedClient(dummyCredential, this.endpointUrl, pipeline);\n  }\n\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input strings are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents A collection of input strings to analyze.\n   * @param countryHint Indicates the country of origin for all of\n   *   the input strings to assist the text analytics model in predicting\n   *   the language they are written in.  If unspecified, this value will be\n   *   set to the default country hint in `TextAnalyticsClientOptions`.\n   *   If set to an empty string, or the string \"none\", the service will apply a\n   *   model where the country is explicitly unset.\n   *   The same country hint is applied to all strings in the input collection.\n   * @param options Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: string[],\n    countryHint?: string,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  /**\n   * Runs a predictive model to determine the language that the passed-in\n   * input document are written in, and returns, for each one, the detected\n   * language as well as a score indicating the model's confidence that the\n   * inferred language is correct.  Scores close to 1 indicate high certainty in\n   * the result.  120 languages are supported.\n   * @param documents A collection of input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async detectLanguage(\n    documents: DetectLanguageInput[],\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray>;\n  public async detectLanguage(\n    documents: string[] | DetectLanguageInput[],\n    countryHintOrOptions?: string | DetectLanguageOptions,\n    options?: DetectLanguageOptions\n  ): Promise<DetectLanguageResultArray> {\n    let realOptions: DetectLanguageOptions;\n    let realInputs: DetectLanguageInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const countryHint = (countryHintOrOptions as string) || this.defaultCountryHint;\n      realInputs = convertToDetectLanguageInput(documents, countryHint);\n      realOptions = options || {};\n    } else {\n      // Replace \"none\" hints with \"\"\n      realInputs = documents.map((input) => ({\n        ...input,\n        countryHint: input.countryHint === \"none\" ? \"\" : input.countryHint\n      }));\n      realOptions = (countryHintOrOptions as DetectLanguageOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-detectLanguages\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.languages(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeDetectLanguageResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input strings, and categorize those entities into types\n   * such as person, location, or organization.  For more information on \n   * available categories, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: string[],\n    language?: string,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of named entities\n   * in the passed-in input documents, and categorize those entities into types\n   * such as person, location, or organization.  For more information on\n   * available categories, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeEntities(\n    documents: TextDocumentInput[],\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray>;\n  public async recognizeEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeCategorizedEntitiesOptions,\n    // eslint-disable-next-line @azure/azure-sdk/ts-naming-options\n    options?: RecognizeCategorizedEntitiesOptions\n  ): Promise<RecognizeCategorizedEntitiesResultArray> {\n    let realOptions: RecognizeCategorizedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeCategorizedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesRecognitionGeneral(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeRecognizeCategorizedEntitiesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify the positive, negative, neutral, or mixed\n   * sentiment contained in the input strings, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async analyzeSentiment(\n    documents: string[],\n    language?: string,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  /**\n   * Runs a predictive model to identify the positive, negative or neutral, or mixed\n   * sentiment contained in the input documents, as well as scores indicating\n   * the model's confidence in each of the predicted sentiments.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async analyzeSentiment(\n    documents: TextDocumentInput[],\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray>;\n  public async analyzeSentiment(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | AnalyzeSentimentOptions,\n    options?: AnalyzeSentimentOptions\n  ): Promise<AnalyzeSentimentResultArray> {\n    let realOptions: AnalyzeSentimentOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as AnalyzeSentimentOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-analyzeSentiment\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.sentiment(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeAnalyzeSentimentResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input strings.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: string[],\n    language?: string,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  /**\n   * Runs a model to identify a collection of significant phrases\n   * found in the passed-in input documents.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async extractKeyPhrases(\n    documents: TextDocumentInput[],\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray>;\n  public async extractKeyPhrases(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | ExtractKeyPhrasesOptions,\n    options?: ExtractKeyPhrasesOptions\n  ): Promise<ExtractKeyPhrasesResultArray> {\n    let realOptions: ExtractKeyPhrasesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as ExtractKeyPhrasesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-extractKeyPhrases\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.keyPhrases(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeExtractKeyPhrasesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input strings, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input strings to analyze.\n   * @param language The language that all the input strings are\n        written in. If unspecified, this value will be set to the default\n        language in `TextAnalyticsClientOptions`.  \n        If set to an empty string, the service will apply a model\n        where the lanuage is explicitly set to \"None\".\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: string[],\n    language?: string,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  /**\n   * Runs a predictive model to identify a collection of entities\n   * found in the passed-in input documents, and include information linking the\n   * entities to their corresponding entries in a well-known knowledge base.\n   * For a list of languages supported by this operation, see\n   * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.\n   * @param documents The input documents to analyze.\n   * @param options Optional parameters for the operation.\n   */\n  public async recognizeLinkedEntities(\n    documents: TextDocumentInput[],\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray>;\n  public async recognizeLinkedEntities(\n    documents: string[] | TextDocumentInput[],\n    languageOrOptions?: string | RecognizeLinkedEntitiesOptions,\n    options?: RecognizeLinkedEntitiesOptions\n  ): Promise<RecognizeLinkedEntitiesResultArray> {\n    let realOptions: RecognizeLinkedEntitiesOptions;\n    let realInputs: TextDocumentInput[];\n\n    if (!Array.isArray(documents) || documents.length === 0) {\n      throw new Error(\"'documents' must be a non-empty array\");\n    }\n\n    if (isStringArray(documents)) {\n      const language = (languageOrOptions as string) || this.defaultLanguage;\n      realInputs = convertToTextDocumentInput(documents, language);\n      realOptions = options || {};\n    } else {\n      realInputs = documents;\n      realOptions = (languageOrOptions as RecognizeLinkedEntitiesOptions) || {};\n    }\n\n    const { span, updatedOptions: finalOptions } = createSpan(\n      \"TextAnalyticsClient-recognizeLinkedEntities\",\n      realOptions\n    );\n\n    try {\n      const result = await this.client.entitiesLinking(\n        {\n          documents: realInputs\n        },\n        operationOptionsToRequestOptionsBase(finalOptions)\n      );\n\n      return makeRecognizeLinkedEntitiesResultArray(\n        realInputs,\n        result.documents,\n        result.errors,\n        result.modelVersion,\n        result.statistics\n      );\n    } catch (e) {\n      span.setStatus({\n        code: CanonicalCode.UNKNOWN,\n        message: e.message\n      });\n      throw e;\n    } finally {\n      span.end();\n    }\n  }\n}\n\nfunction isStringArray(documents: any[]): documents is string[] {\n  return typeof documents[0] === \"string\";\n}\n\nfunction convertToDetectLanguageInput(\n  inputs: string[],\n  countryHint: string\n): DetectLanguageInput[] {\n  if (countryHint === \"none\") {\n    countryHint = \"\";\n  }\n  return inputs.map(\n    (text: string, index): DetectLanguageInput => {\n      return {\n        id: String(index),\n        countryHint,\n        text\n      };\n    }\n  );\n}\n\nfunction convertToTextDocumentInput(inputs: string[], language: string): TextDocumentInput[] {\n  return inputs.map(\n    (text: string, index): TextDocumentInput => {\n      return {\n        id: String(index),\n        language,\n        text\n      };\n    }\n  );\n}\n"],"names":["coreHttp.ServiceClient","coreHttp.getDefaultUserAgentValue","coreHttp.Serializer","Parameters.endpoint","Parameters.modelVersion","Parameters.includeStatistics","Mappers.MultiLanguageBatchInput","Mappers.EntitiesResult","Mappers.TextAnalyticsError","Mappers.EntityLinkingResult","Mappers.KeyPhraseResult","Mappers.LanguageBatchInput","Mappers.LanguageResult","Mappers.SentimentResponse","createClientLogger","RestError","getTracer","SpanKind","BaseRequestPolicy","isTokenCredential","bearerTokenAuthenticationPolicy","createPipelineFromOptions","operationOptionsToRequestOptionsBase","CanonicalCode"],"mappings":"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"}