import { AzureKeyCredential } from '@azure/core-auth';
import { KeyCredential } from '@azure/core-auth';
import { OperationOptions } from '@azure/core-http';
import { PipelineOptions } from '@azure/core-http';
import { TokenCredential } from '@azure/core-auth';

/**
 * An error result from the analyze sentiment operation on a single document.
 */
export declare type AnalyzeSentimentErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the analyze sentiment operation.
 */
export declare type AnalyzeSentimentOptions = TextAnalyticsOperationOptions;

/**
 * The result of the analyze sentiment operation on a single document.
 */
export declare type AnalyzeSentimentResult = AnalyzeSentimentSuccessResult | AnalyzeSentimentErrorResult;

/**
 * Array of `AnalyzeSentimentResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface AnalyzeSentimentResultArray extends Array<AnalyzeSentimentResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 *  The result of the analyze sentiment operation on a single document,
 *  containing the predicted sentiment for each sentence as well as for the full document.
 */
export declare interface AnalyzeSentimentSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * Predicted sentiment for document. Possible values
     * include: 'positive', 'neutral', 'negative', 'mixed'
     */
    sentiment: DocumentSentimentLabel;
    /**
     * Document level sentiment confidence scores between 0 and 1 for each sentiment class.
     */
    confidenceScores: SentimentConfidenceScores;
    /**
     * The predicted sentiment for each sentence in the corresponding document.
     */
    sentences: SentenceSentiment[];
}
export { AzureKeyCredential }

/**
 * An entity from text analysis with information about its categorical
 * classification.
 */
export declare interface CategorizedEntity extends Entity {
}

/**
 * An interface representing DetectedLanguage.
 */
export declare interface DetectedLanguage {
    /**
     * Long name of a detected language (e.g. English, French).
     */
    name: string;
    /**
     * A two letter representation of the detected language according to the ISO 639-1 standard (e.g.
     * en, fr).
     */
    iso6391Name: string;
    /**
     * A confidence score between 0 and 1. Scores close to 1 indicate 100% certainty that the
     * identified language is true.
     */
    confidenceScore: number;
}

/**
 * An error result from the detect languge operation on a single document.
 */
export declare type DetectLanguageErrorResult = TextAnalyticsErrorResult;

/**
 * An interface representing LanguageInput.
 */
export declare interface DetectLanguageInput {
    /**
     * Unique, non-empty document identifier.
     */
    id: string;
    text: string;
    countryHint?: string;
}

/**
 * Options for the detect languages operation.
 */
export declare type DetectLanguageOptions = TextAnalyticsOperationOptions;

/**
 * The result of the detect language operation on a single document.
 */
export declare type DetectLanguageResult = DetectLanguageSuccessResult | DetectLanguageErrorResult;

/**
 * Array of `DetectLanguageResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface DetectLanguageResultArray extends Array<DetectLanguageResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the detect language operation on a single document,
 * containing a prediction of what language the document is written in.
 */
export declare interface DetectLanguageSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The top detected language by confidence score.
     */
    readonly primaryLanguage: DetectedLanguage;
}

/**
 * Defines values for DocumentSentimentLabel.
 * Possible values include: 'positive', 'neutral', 'negative', 'mixed'
 * @readonly
 * @enum {string}
 */
export declare type DocumentSentimentLabel = 'positive' | 'neutral' | 'negative' | 'mixed';

/**
 * An interface representing Entity.
 */
export declare interface Entity {
    /**
     * Entity text as appears in the request.
     */
    text: string;
    /**
     * Entity type, such as Person/Location/Org/SSN etc
     */
    category: string;
    /**
     * Entity sub type, such as Age/Year/TimeRange etc
     */
    subCategory?: string;
    /**
     * Confidence score between 0 and 1 of the extracted entity.
     */
    confidenceScore: number;
}

/**
 * An Error Code returned from the Text Analytics service. Possible
 * values include:
 *
 * For more information about the error, see the `message` property of the associated error.
 */
export declare type ErrorCode = ErrorCodeValue | InnerErrorCodeValue;

/**
 * Defines values for ErrorCodeValue.
 * Possible values include: 'InvalidRequest', 'InvalidArgument', 'InternalServerError',
 * 'ServiceUnavailable'
 * @readonly
 * @enum {string}
 */
export declare type ErrorCodeValue = 'InvalidRequest' | 'InvalidArgument' | 'InternalServerError' | 'ServiceUnavailable';

/**
 * An error result from the extract key phrases operation on a single document.
 */
export declare type ExtractKeyPhrasesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the extract key phrases operation.
 */
export declare type ExtractKeyPhrasesOptions = TextAnalyticsOperationOptions;

/**
 * The result of the extract key phrases operation on a single document.
 */
export declare type ExtractKeyPhrasesResult = ExtractKeyPhrasesSuccessResult | ExtractKeyPhrasesErrorResult;

/**
 * Array of `ExtractKeyPhrasesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface ExtractKeyPhrasesResultArray extends Array<ExtractKeyPhrasesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the extract key phrases operation on a single document,
 * containing a collection of the key phrases identified in that document.
 */
export declare interface ExtractKeyPhrasesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * A list of representative words or phrases. The number of key phrases returned is proportional
     * to the number of words in the input document.
     */
    keyPhrases: string[];
}

/**
 * Defines values for InnerErrorCodeValue.
 * Possible values include: 'InvalidParameterValue', 'InvalidRequestBodyFormat', 'EmptyRequest',
 * 'MissingInputRecords', 'InvalidDocument', 'ModelVersionIncorrect', 'InvalidDocumentBatch',
 * 'UnsupportedLanguageCode', 'InvalidCountryHint'
 * @readonly
 * @enum {string}
 */
export declare type InnerErrorCodeValue = 'InvalidParameterValue' | 'InvalidRequestBodyFormat' | 'EmptyRequest' | 'MissingInputRecords' | 'InvalidDocument' | 'ModelVersionIncorrect' | 'InvalidDocumentBatch' | 'UnsupportedLanguageCode' | 'InvalidCountryHint';

/**
 * An interface representing LinkedEntity.
 */
export declare interface LinkedEntity {
    /**
     * Entity Linking formal name.
     */
    name: string;
    /**
     * List of instances this entity appears in the text.
     */
    matches: Match[];
    /**
     * Language used in the data source.
     */
    language: string;
    /**
     * Unique identifier of the recognized entity from the data source.
     */
    dataSourceEntityId?: string;
    /**
     * URL for the entity's page from the data source.
     */
    url: string;
    /**
     * Data source used to extract entity linking, such as Wiki/Bing etc.
     */
    dataSource: string;
}

/**
 * An interface representing Match.
 */
export declare interface Match {
    /**
     * If a well-known item is recognized, a decimal number denoting the confidence level between 0
     * and 1 will be returned.
     */
    confidenceScore: number;
    /**
     * Entity text as appears in the request.
     */
    text: string;
}

/**
 * An error result from the recognize entities operation on a single document.
 */
export declare type RecognizeCategorizedEntitiesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the recognize entities operation.
 */
export declare type RecognizeCategorizedEntitiesOptions = TextAnalyticsOperationOptions;

/**
 * The result of the recognize entities operation on a single document.
 */
export declare type RecognizeCategorizedEntitiesResult = RecognizeCategorizedEntitiesSuccessResult | RecognizeCategorizedEntitiesErrorResult;

/**
 * Array of `RecognizeCategorizedEntitiesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface RecognizeCategorizedEntitiesResultArray extends Array<RecognizeCategorizedEntitiesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the recognize entities operation on a single document, containing the collection of
 * `Entity` objects identified in that document.
 */
export declare interface RecognizeCategorizedEntitiesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: CategorizedEntity[];
}

/**
 * An error result from the recognize linked entities operation on a single document.
 */
export declare type RecognizeLinkedEntitiesErrorResult = TextAnalyticsErrorResult;

/**
 * Options for the recognize linked entities operation.
 */
export declare type RecognizeLinkedEntitiesOptions = TextAnalyticsOperationOptions;

/**
 * The result of the recognize linked entities operation on a single document.
 */
export declare type RecognizeLinkedEntitiesResult = RecognizeLinkedEntitiesSuccessResult | RecognizeLinkedEntitiesErrorResult;

/**
 * Array of `RecognizeLinkedEntitiesResult` objects corresponding to a batch of input documents, and
 * annotated with information about the batch operation.
 */
export declare interface RecognizeLinkedEntitiesResultArray extends Array<RecognizeLinkedEntitiesResult> {
    /**
     * Statistics about the input document batch and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    statistics?: TextDocumentBatchStatistics;
    /**
     * The version of the text analytics model used by this operation on this
     * batch of input documents.
     */
    modelVersion: string;
}

/**
 * The result of the recognize linked entities operation on a single document,
 * containing a collection of the `LinkedEntity` objects identified in that document.
 */
export declare interface RecognizeLinkedEntitiesSuccessResult extends TextAnalyticsSuccessResult {
    /**
     * The collection of entities identified in the input document.
     */
    readonly entities: LinkedEntity[];
}

/**
 * An interface representing SentenceSentiment.
 */
export declare interface SentenceSentiment {
    /**
     * The sentence text.
     */
    text?: string;
    /**
     * The predicted Sentiment for the sentence. Possible values include: 'positive', 'neutral',
     * 'negative'
     */
    sentiment: SentenceSentimentLabel;
    /**
     * The sentiment confidence score between 0 and 1 for the sentence for all classes.
     */
    confidenceScores: SentimentConfidenceScores;
}

/**
 * Defines values for SentenceSentimentLabel.
 * Possible values include: 'positive', 'neutral', 'negative'
 * @readonly
 * @enum {string}
 */
export declare type SentenceSentimentLabel = 'positive' | 'neutral' | 'negative';

/**
 * Represents the confidence scores between 0 and 1 across all sentiment classes: positive,
 * neutral, negative.
 */
export declare interface SentimentConfidenceScores {
    positive: number;
    neutral: number;
    negative: number;
}

/**
 * Client class for interacting with Azure Text Analytics.
 */
export declare class TextAnalyticsClient {
    /**
     * The URL to the TextAnalytics endpoint
     */
    readonly endpointUrl: string;
    /**
     * The default country hint to use. Defaults to "us".
     */
    defaultCountryHint: string;
    /**
     * The default language to use. Defaults to "en".
     */
    defaultLanguage: string;
    /* Excluded from this release type: client */
    /**
     * Creates an instance of TextAnalyticsClient.
     *
     * Example usage:
     * ```ts
     * import { TextAnalyticsClient, AzureKeyCredential } from "@azure/ai-text-analytics";
     *
     * const client = new TextAnalyticsClient(
     *    "<service endpoint>",
     *    new AzureKeyCredential("<api key>")
     * );
     * ```
     * @param {string} endpointUrl The URL to the TextAnalytics endpoint
     * @param {TokenCredential | KeyCredential} credential Used to authenticate requests to the service.
     * @param {TextAnalyticsClientOptions} [options] Used to configure the TextAnalytics client.
     */
    constructor(endpointUrl: string, credential: TokenCredential | KeyCredential, options?: TextAnalyticsClientOptions);
    /**
     * Runs a predictive model to determine the language that the passed-in
     * input strings are written in, and returns, for each one, the detected
     * language as well as a score indicating the model's confidence that the
     * inferred language is correct.  Scores close to 1 indicate high certainty in
     * the result.  120 languages are supported.
     * @param documents A collection of input strings to analyze.
     * @param countryHint Indicates the country of origin for all of
     *   the input strings to assist the text analytics model in predicting
     *   the language they are written in.  If unspecified, this value will be
     *   set to the default country hint in `TextAnalyticsClientOptions`.
     *   If set to an empty string, or the string "none", the service will apply a
     *   model where the country is explicitly unset.
     *   The same country hint is applied to all strings in the input collection.
     * @param options Optional parameters for the operation.
     */
    detectLanguage(documents: string[], countryHint?: string, options?: DetectLanguageOptions): Promise<DetectLanguageResultArray>;
    /**
     * Runs a predictive model to determine the language that the passed-in
     * input document are written in, and returns, for each one, the detected
     * language as well as a score indicating the model's confidence that the
     * inferred language is correct.  Scores close to 1 indicate high certainty in
     * the result.  120 languages are supported.
     * @param documents A collection of input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    detectLanguage(documents: DetectLanguageInput[], options?: DetectLanguageOptions): Promise<DetectLanguageResultArray>;
    /**
     * Runs a predictive model to identify a collection of named entities
     * in the passed-in input strings, and categorize those entities into types
     * such as person, location, or organization.  For more information on
     * available categories, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    recognizeEntities(documents: string[], language?: string, options?: RecognizeCategorizedEntitiesOptions): Promise<RecognizeCategorizedEntitiesResultArray>;
    /**
     * Runs a predictive model to identify a collection of named entities
     * in the passed-in input documents, and categorize those entities into types
     * such as person, location, or organization.  For more information on
     * available categories, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/Text-Analytics/named-entity-types.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    recognizeEntities(documents: TextDocumentInput[], options?: RecognizeCategorizedEntitiesOptions): Promise<RecognizeCategorizedEntitiesResultArray>;
    /**
     * Runs a predictive model to identify the positive, negative, neutral, or mixed
     * sentiment contained in the input strings, as well as scores indicating
     * the model's confidence in each of the predicted sentiments.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    analyzeSentiment(documents: string[], language?: string, options?: AnalyzeSentimentOptions): Promise<AnalyzeSentimentResultArray>;
    /**
     * Runs a predictive model to identify the positive, negative or neutral, or mixed
     * sentiment contained in the input documents, as well as scores indicating
     * the model's confidence in each of the predicted sentiments.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    analyzeSentiment(documents: TextDocumentInput[], options?: AnalyzeSentimentOptions): Promise<AnalyzeSentimentResultArray>;
    /**
     * Runs a model to identify a collection of significant phrases
     * found in the passed-in input strings.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    extractKeyPhrases(documents: string[], language?: string, options?: ExtractKeyPhrasesOptions): Promise<ExtractKeyPhrasesResultArray>;
    /**
     * Runs a model to identify a collection of significant phrases
     * found in the passed-in input documents.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    extractKeyPhrases(documents: TextDocumentInput[], options?: ExtractKeyPhrasesOptions): Promise<ExtractKeyPhrasesResultArray>;
    /**
     * Runs a predictive model to identify a collection of entities
     * found in the passed-in input strings, and include information linking the
     * entities to their corresponding entries in a well-known knowledge base.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input strings to analyze.
     * @param language The language that all the input strings are
          written in. If unspecified, this value will be set to the default
          language in `TextAnalyticsClientOptions`.
          If set to an empty string, the service will apply a model
          where the lanuage is explicitly set to "None".
     * @param options Optional parameters for the operation.
     */
    recognizeLinkedEntities(documents: string[], language?: string, options?: RecognizeLinkedEntitiesOptions): Promise<RecognizeLinkedEntitiesResultArray>;
    /**
     * Runs a predictive model to identify a collection of entities
     * found in the passed-in input documents, and include information linking the
     * entities to their corresponding entries in a well-known knowledge base.
     * For a list of languages supported by this operation, see
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/language-support.
     * @param documents The input documents to analyze.
     * @param options Optional parameters for the operation.
     */
    recognizeLinkedEntities(documents: TextDocumentInput[], options?: RecognizeLinkedEntitiesOptions): Promise<RecognizeLinkedEntitiesResultArray>;
}

/**
 * Client options used to configure TextAnalytics API requests.
 */
export declare interface TextAnalyticsClientOptions extends PipelineOptions {
    /**
     * The default country hint to use. Defaults to "us".
     */
    defaultCountryHint?: string;
    /**
     * The default language to use. Defaults to "en".
     */
    defaultLanguage?: string;
}

/**
 * Type describing an error from the Text Analytics service
 */
export declare interface TextAnalyticsError {
    /**
     * A code describing the kind of error produced
     */
    readonly code: ErrorCode;
    /**
     * A message from the service explaining the error
     */
    readonly message: string;
    /**
     * The target of the particular error (for example, the name of an invalid parameter)
     */
    readonly target?: string;
}

/**
 * Base type for error results of text analytics operations corresponding to a
 * single document.
 */
export declare interface TextAnalyticsErrorResult {
    /**
     * Unique, non-empty document identifier.
     */
    readonly id: string;
    /**
     * The Error for this document result.
     */
    readonly error: TextAnalyticsError;
}

/**
 * Options common to all text analytics operations.
 */
export declare interface TextAnalyticsOperationOptions extends OperationOptions {
    /**
     * This value indicates which model will be used for scoring. If a model-version is
     * not specified, the API should default to the latest, non-preview version.
     * For supported model versions, see operation-specific documentation, for example:
     * https://docs.microsoft.com/en-us/azure/cognitive-services/text-analytics/how-tos/text-analytics-how-to-sentiment-analysis#model-versioning
     */
    modelVersion?: string;
    /**
     * If set to true, response will contain input and document level statistics.
     */
    includeStatistics?: boolean;
}

/**
 * The result of a text analytics operation on a single input document.
 */
export declare type TextAnalyticsResult = TextAnalyticsSuccessResult | TextAnalyticsErrorResult;

/**
 * Base type for results of text analytics operations corresponding to a single
 * input document.
 */
export declare interface TextAnalyticsSuccessResult {
    /**
     * Unique, non-empty document identifier.
     */
    readonly id: string;
    /**
     * Statistics about the input document and how it was processed
     * by the service. This property will have a value when includeStatistics is set to true
     * in the client call.
     */
    readonly statistics?: TextDocumentStatistics;
    /**
     * An array of warning data corresponding to this document.
     *
     * If no warnings were returned, this array will be empty.
     */
    readonly warnings: TextAnalyticsWarning[];
    /**
     * Discriminant to determine if that this is an error result.
     */
    readonly error?: undefined;
}

/**
 * An interface representing TextAnalyticsWarning.
 */
export declare interface TextAnalyticsWarning {
    /**
     * Error code. Possible values include: 'LongWordsInDocument', 'DocumentTruncated'
     */
    code: WarningCode;
    /**
     * Warning message.
     */
    message: string;
}

/**
 * if showStats=true was specified in the request this field will contain information about the
 * request payload.
 */
export declare interface TextDocumentBatchStatistics {
    /**
     * Number of documents submitted in the request.
     */
    documentCount: number;
    /**
     * Number of valid documents. This excludes empty, over-size limit or non-supported languages
     * documents.
     */
    validDocumentCount: number;
    /**
     * Number of invalid documents. This includes empty, over-size limit or non-supported languages
     * documents.
     */
    erroneousDocumentCount: number;
    /**
     * Number of transactions for the request.
     */
    transactionCount: number;
}

/**
 * Contains an input document to be analyzed by the service.
 */
export declare interface TextDocumentInput {
    /**
     * A unique, non-empty document identifier.
     */
    id: string;
    /**
     * The input text to process.
     */
    text: string;
    /**
     * (Optional) This is the 2 letter ISO 639-1 representation of a language. For example, use "en"
     * for English; "es" for Spanish etc. If not set, use "en" for English as default.
     */
    language?: string;
}

/**
 * if showStats=true was specified in the request this field will contain information about the
 * document payload.
 */
export declare interface TextDocumentStatistics {
    /**
     * Number of text elements recognized in the document.
     */
    characterCount: number;
    /**
     * Number of transactions for the document.
     */
    transactionCount: number;
}

/**
 * Defines values for WarningCode.
 * Possible values include: 'LongWordsInDocument', 'DocumentTruncated'
 * @readonly
 * @enum {string}
 */
export declare type WarningCode = 'LongWordsInDocument' | 'DocumentTruncated';

export { }
